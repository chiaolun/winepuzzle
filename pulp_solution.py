#!/usr/bin/env python

from pulp.constants import (
    LpMinimize,
)
from pulp import (
    LpProblem,
    LpVariable,
    LpInteger,
    lpSum,
    allcombinations,
)

nmice = 10
nbottles = 1000
npoisoned = 2
nlabels = 2**nmice
labels = range(nlabels)

# Arbitrary large number to be used later
M = nbottles

# Initialize problem
prob = LpProblem("drunk_mice", LpMinimize)

# This is the answer, the allocation of bottles to each label:
allocs = LpVariable.dicts(
    "alloc",
    labels,
    0, nbottles,
    LpInteger,
)
# Not implemented
# for i, alloc in allocs.items():
#     alloc.setInitialValue(nbottles // nlabels + (i < nbottles % nlabels))

# They must sum to nbottles:
prob += lpSum(allocs) == nbottles

# This is the number we are minimizing
worst_loss = LpVariable(
    "worst_loss",
    npoisoned,
    nbottles,
    LpInteger,
)

prob += worst_loss, "obj"

# This is the loss for each label
scenario_loss = LpVariable.dicts(
    "scenario_loss",
    labels,
    0, nbottles,
    LpInteger,
)

# The worst loss is worse than each scenario loss
for i in labels:
    prob += worst_loss >= scenario_loss[i]

# An scenario is generated by the overlapping of underlying
# labels. For each such set, if every underlying label has a non-zero
# allocation, then the allocations to all the labels must be added to
# the scenario loss

scenario2labels = {i : set() for i in labels}
scenario2label_sets = {i : set() for i in labels}
for label_set in allcombinations(labels, npoisoned):
    scenario = 0
    for label in label_set:
        scenario |= label
    scenario2label_sets[scenario].add(label_set)
    for label in label_set:
        scenario2labels[scenario].add(label)

alloc_nonzero = LpVariable.dicts(
    "alloc_nonzero",
    labels, 0, 1,
    LpInteger,
)
for i in labels:
    alloc0 = allocs[i]
    nonzero0 = alloc_nonzero[i]
    prob += alloc0 <= nonzero0 * M

ll = []
lz = []
lsv = []

for scenario in labels:
    scenario_labels = [(scenario, i) for i in scenario2labels[scenario]]
    scenario_label_sets = [(scenario, ls) for ls in scenario2label_sets[scenario]]
    label_zero = LpVariable.dicts(
        "label_zero",
        scenario_labels,
        0, nbottles, LpInteger,
    )
    lz.extend(label_zero.values())

    label_sets = LpVariable.dicts(
        "label_set_active",
        scenario_label_sets,
        0, 1, LpInteger,
    )
    lsv.extend(label_sets.values())

    for label_set0 in scenario_label_sets:
        label_set_var = label_sets[label_set0]
        prob += lpSum(alloc_nonzero[i] for i in label_set0[1]) - label_set_var * M <= len(label_set0[1]) - 1
        for label0 in label_set0[1]:
            prob += label_zero[(scenario, label0)] <= (1 - label_set_var)

    loss = scenario_loss[scenario]
    label_loss = LpVariable.dicts(
        "label_loss",
        scenario_labels,
        0, nbottles, LpInteger,
    )
    ll.extend(label_loss.values())
    prob += lpSum(label_loss) == loss

    for label0 in scenario_labels:
        prob += label_loss[label0] >= allocs[label0[1]] - label_zero[label0] * M

prob.writeLP("drunk_mice.lp")
prob.solve()
